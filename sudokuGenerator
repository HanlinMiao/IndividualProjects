#include <iostream>
#include <cstdlib>
#include <chrono>
#include <cmath>
#include <limits>
using namespace std;
using namespace std::chrono;
bool checkRow (int arr[9][9], int rowNum, int colNum){

        for (int j =0; j <colNum; j++){
            if(colNum==j){
                continue;
            }
            
           else if (arr[rowNum][colNum] == arr[rowNum][j] ){

                return false;
       
            }

        }return true;

}
bool checkColumn(int arr[9][9], int rowNum, int colNum){
    for(int i = 0; i <rowNum; i++){
      if(rowNum==i){
          continue;
      }else if(arr[rowNum][colNum] == arr[i][colNum]){
            return false;
      }
    }return true;

}
bool check3x3(int arr[9][9], int rowNum, int colNum){
  for(int i = (rowNum/3)*3; i<(rowNum/3)*3+3;i++ ){
    for(int j = (colNum/3)*3; j<(colNum/3)*3+3; j++){
        if(rowNum == i && colNum == j){
          continue;
        }else if(arr[i][j]==arr[rowNum][colNum]){
          return false;
        }
    }
  }return true;
}

void filler ()
{

  srand (time(0));

  for (int i = 0; i <rand()%rand(); i++)
    {
      int num2 = pow(rand(), rand());

    }

}




int RNG (){

    auto start = high_resolution_clock::now();

    filler();

    auto end = high_resolution_clock::now();

    auto duration = duration_cast<microseconds>(end - start);

    srand (duration.count());
    
    return (rand()%9+1);

}



void sudokuGenerator (int arr[9][9]){
    int counter = 100;
    for (int i =0; i < 9; i++){
        for(int j = 0; j<9; j++){
            arr[i][j]=0;
        }
    }
    int count = 0;
    for (int i =0; i < 9; i++){
         for(int j = 0; j<9; j++){
           arr[i][j] =RNG();
           if(count<=counter){
              if(checkRow(arr, i, j)&&checkColumn(arr, i, j)&&check3x3(arr, i, j)){
                count = 0;
                continue;
              }else{
                count++;
                j--;
              }
           }else{
            for(int y = 0; y<9;y++){
                  arr[i][y] = 0;
            }
            
             i--;
             j=-1;
             count =0;
           }
         }

}

cout << " " << endl;

    for (int i =0; i < 9; i++){
        for(int j = 0; j<9; j++){
            cout << arr[i][j] << " ";
        }cout<<" "<<endl;

    }

}

void blockNumbers(int arr[9][9]){
  cout<< "Type in which level of difficulty do you want"<<endl;
  cout<< "Easy" << endl;
  cout<< "Medium" << endl;
  cout<< "Hard" <<endl;

  string difficulty;
  cin>> difficulty;
  int num = 0;
  char d;
  if(difficulty == "Easy"){
    d = 'E';
  }else if(difficulty == "Medium"){
    d= 'M';
  }else{
    d= 'H';
  }

  
 

  switch(d){
    case 'E': 
    num = 1;
    break;

    case 'M': 
    num = 3;
    break;

    case 'H': 
    num = 5;
    break;
  }

  for(int i = 0; i< 9; i++){
    for (int j =0; j<num; j++){
      int rand = RNG()-1;
      while(arr[i][rand]==0){
        rand = RNG()-1;
      }
        arr[i][rand] = 0;
    }
  }
  for(int i = 0; i< 9; i++){
    for (int j =0; j< 9; j++){
      cout << arr[i][j] <<" ";
    }cout<< " " << endl;
  }
}
bool checkFilled(int arr[9][9]){
  for(int i = 0; i< 9; i++){
        for (int j =0; j< 9; j++){
          if(arr[i][j]==0){
            return false;
          }
        }
  }return true;
}

void sudokuSolver(int arr[9][9]){
  cout<< "Which empty space would you like to fill in first?"<< endl;
  int x;
  int y;
  cin>> x;
  cin>> y;
  while(1){
    if(!checkFilled(arr)){
    while(1){
      if(cin.fail()){
        cout<< "Please enter a NUMBER" << endl;
        cin.clear();
        cin.ignore(numeric_limits<streamsize>::max(),'\n');
        cin>> x;
        cin>> y;
      }else if((x<1 || x>9)||(y>9 || y<1)){
        cout<< "Please enter two numbers within the range of 1 to 9"<< endl;
        cin.clear();
        cin.ignore(numeric_limits<streamsize>::max(),'\n');
        cin>> x;
        cin>> y;
      }else{
        break;
      }
    } 
    cout<< "Enter a number to fill in" << endl;
    int fill;
    cin>> fill;
    while(1){
      if(cin.fail()){
        cout<< "Please enter a NUMBER" << endl;
        cin.clear();
        cin.ignore(numeric_limits<streamsize>::max(),'\n');
        cin>> fill;
  
      }else if(fill<1 || fill>9){
        cout<< "Please enter a number within the range of 1 to 9"<< endl;
        cin.clear();
        cin.ignore(numeric_limits<streamsize>::max(),'\n');
        cin>> fill;
     
      }else{
        break;
      }
    } for(int i = 0; i< 9; i++){
        for (int j =0; j< 9; j++){
        if(i == x-1 && j == y-1){
          arr[i][j] = fill;
        } cout << arr[i][j] <<" ";
      } cout<< " " << endl;
    }cout<< "Which empty space would you like to fill in next?"<< endl;
    cin>> x;
    cin>> y;
    }else{
      cout<< "Congratulations!"<< endl;
      break;
    }
  }
}



int main ()

{

auto start = high_resolution_clock::now();

int arr[9][9];

sudokuGenerator (arr);
blockNumbers(arr);
sudokuSolver(arr);

auto end = high_resolution_clock::now();

cout<< " "<<endl;

auto duration = duration_cast<seconds>(end - start);

cout<< duration.count() << endl;

return 0;

}
