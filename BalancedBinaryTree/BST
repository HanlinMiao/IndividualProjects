#include <iostream>
#include <math.h>

using namespace std;

class node{
  public:
    int value;
    int height;
    node* left;
    node* right;
    node(){
      value = 0;
      height = 0;
      left = NULL;
      right = NULL;
    }
};

class Tree{
  public:
    node* root;

  Tree(){
    root = NULL;
  }
  node* search(int value){
    if(root==NULL){
      cout<< "There is nothing in the tree" <<endl;
    }else{
      node*leaf = root;
      while(leaf->left!=NULL||leaf->right!=NULL){
        if(leaf->value==value){
          cout<< "Found it" << endl;
          return leaf;
        }else if(leaf->value <value){
          if(leaf->right!=NULL){
            leaf = leaf->right;
          }else{
            cout<< "no Such value on the right"<< endl;
            break;
          }
        }else if(leaf->value >value){
          if(leaf->left!=NULL){
            leaf = leaf->left;
          }else{
            cout<< "no Such value on the left"<< endl;
            break;
          }
        }else if(leaf==NULL){
          cout<<"No Such Value"<<endl;
          break;
        }
      }if(leaf->value==value){
          cout<< "Found it" << endl;
          return leaf;
      }else{
        cout<<"No Such Value"<<endl;
      }
    }
    return NULL;
  }
  void insert(int value){
    if(root==NULL){
      root = new node;
      root->value = value;
      root->height = 0;
      return;
    }else{
      node* pointer;
      pointer = root;
      
      while(pointer->left!=NULL || pointer->right!=NULL){
        if(pointer->value < value){
          if(pointer->right==NULL){
            pointer->right = new node;
            pointer->right->value = value;
            updateHeight(root);
            if(ifBalanced(root)==false){
              node * detector = root;
              node * pursuer = root;
              node * previous = root;
              while(ifBalanced(detector)== false){
                int drh;
                int dlh;
                if(detector->left==NULL){
                  dlh = -1;
                }else{
                  dlh= detector->left->height;
                }
                if(detector->right==NULL){
                  drh = -1;
                }else{
                  dlh= detector->right->height;
                }
                if(drh>dlh){
                  previous = pursuer;
                  pursuer=detector;
                  detector = detector->right;
                }else{
                  previous = pursuer;
                  pursuer=detector;
                  detector = detector->left;
                }
              }int pr, pl, dr, dl;
              if(pursuer->right==NULL){
                pr=-1;
              }else{
                pr = pursuer->right->height;
              }
              if(pursuer->left==NULL){
                pl=-1;
              }else{
                pl= pursuer->left->height;
              }
              if(detector->right==NULL){
                dr=-1;
              }else{
                dr = detector->right->height;
              }
              if(detector->left==NULL){
                dl=-1;
              }else{
                dl= detector->left->height;
              }
              if(pl>pr){
                if(dr!=-1&&detector->right->value==value){
                  rightRotation(detector, pursuer);
                  leftRotation(pursuer, previous);
                }else{
                  leftRotation(pursuer, previous);
                }
              }else{
                if(dl!=-1&&detector->left->value==value){
                  leftRotation(detector, pursuer);
                  rightRotation(pursuer, previous);
                }else{
                  rightRotation(pursuer, previous);
                }
              }
            
          }
            return;
          }else{
            pointer = pointer->right;
          }
        }else if(pointer->value >value){
          if(pointer->left==NULL){
            pointer->left = new node;
            pointer->left->value = value;
            updateHeight(root);
            if(ifBalanced(root)==false){
              cout<< "Not Balanced"<< endl;
            }
            return;
          }else{
            pointer = pointer->left;
          }
        }
      }
      if(value>pointer->value){
        pointer->right = new node;
        pointer->right->value = value;
        updateHeight(root);
        if(ifBalanced(root)==false){
            node * detector = root;
            node * pursuer = root;
            node * previous = root;
              while(ifBalanced(detector)== false){
                int drh;
                int dlh;
                if(detector->left==NULL){
                  dlh = -1;
                }else{
                  dlh= detector->left->height;
                }
                if(detector->right==NULL){
                  drh = -1;
                }else{
                  drh= detector->right->height;
                }
                if(drh>dlh){
                  previous = pursuer;
                  pursuer=detector;
                  detector = detector->right;
                  
                }else{
                  previous = pursuer;
                  pursuer=detector;
                  detector = detector->left;
                  
                }
              }
              int pr, pl, dr, dl;
              if(pursuer->right==NULL){
                pr=-1;
              }else{
                pr = pursuer->right->height;
              }
              if(pursuer->left==NULL){
                pl=-1;
              }else{
                pl= pursuer->left->height;
              }
              if(detector->right==NULL){
                dr=-1;
              }else{
                dr = detector->right->height;
              }
              if(detector->left==NULL){
                dl=-1;
              }else{
                dl= detector->left->height;
              }
              if(pl>pr){
                if(dr!=-1&&detector->right->value==value){
                  rightRotation(detector, pursuer);
                  leftRotation(pursuer, previous);
                }else{
                  leftRotation(pursuer, previous);
                }
              }else{
                if(dl!=-1&&detector->left->value==value){
                  leftRotation(detector, pursuer);
                  rightRotation(pursuer, previous);
                }else{
                  rightRotation(pursuer, previous);
                }
              }
            
          
        }
        return;
      }else{
        pointer->left = new node;
        pointer->left->value = value;
        updateHeight(root);
        if(ifBalanced(root)==false){
           cout<< "Not Balanced"<< endl;
        }
        return;
      }
    }
  }
  



  void inOrder(node* pointer){
    if(root==NULL){
      cout << "nothing to print "<< endl;
    }else{
      if(pointer==NULL){
        return;
      }else{
        inOrder(pointer->left);
        cout<< pointer->value << " ";
        inOrder(pointer->right);
      }
    }
  }
  




  int updateHeight(node* root){
    if(root==NULL){
      return -1;
    }else{
      root->height = max(updateHeight(root->left), updateHeight(root->right))+1;
      return root->height;
    }
  }
  
  bool ifBalanced(node *pointer){
    if(root==NULL){
      cout<<"Insert Something First"<<endl;
    }else{
     if(pointer->left!=NULL&&pointer->right!=NULL){
      int difference = abs(pointer->left->height-pointer->right->height);
      if(difference > 1){
        return false;
      }
    }else if(pointer->left==NULL){
        int difference = abs(-1-pointer->right->height);
        if(difference > 1){
          return false;
        }
    }else if(pointer->right==NULL){
        int difference = abs(-1-pointer->left->height);
        if(difference > 1){
          return false;
        } 
    }else{
        return true;
      }
    }
    return true;
  }


     

  




  void rightRotation(node *begin, node* previous){
      node* end = begin->right;
      begin->right = end->left;
      end->left = begin;
       if(begin==previous){
        root=end;
        }else{
        if(previous->left->value == begin->value){
          previous->left = end;
        }else{
          previous->right = end;
        }
      }
    
    updateHeight(root);
  }
  void leftRotation(node *begin, node* previous){
    
      node *end = begin->left;
      begin->left= end->right;
      end->right = begin;
      if(begin==previous){
        root=end;
      }else{
        if(previous->left->value == begin->value){
          previous->left = end;
        }else{
          previous->right = end;
        }
      }
      
      updateHeight(root);
      
  }

};
node* treeBalance(Tree* myTree, node *pointer){
   
  
}
  
int main(){
  Tree* myHeap = new Tree();
  myHeap->insert(89);
  myHeap->insert(19);
  myHeap->insert(20);
  myHeap->insert(4);
  myHeap->insert(23);
  myHeap->insert(5);
  //myHeap->insert(6);
  //myHeap->insert(7);
  //node* search = myHeap->search(7);
  myHeap->inOrder(myHeap->root);
  cout<< endl;
  cout<< "Root Value " << myHeap->root->value << endl;
  //cout<< search->height << endl;
  cout<< treeBalance(myHeap, myHeap->root)->value<<endl;
  return 0;
}
