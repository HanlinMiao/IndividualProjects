#include <iostream>
#include <math.h>
#include <vector>
using namespace std;

class node{
  public:
    int value;
    int height;
    node* left;
    node* right;
    node(){
      value = 0;
      height = 0;
      left = NULL;
      right = NULL;
    }
};

class Tree{
  public:
    node* root;

  Tree(){
    root = NULL;
  }

  node* search(int value){
    if(root==NULL){
      cout<< "There is nothing in the tree" <<endl;
    }else{
      node*leaf = root;
      while(leaf!=NULL){
        if(leaf->value>value){
          leaf = leaf->left;
        }else if(leaf->value<value){
          leaf = leaf->right;
        }else{
          return leaf;
        }
      }if(leaf==NULL){
        return NULL;
      }
    }
    return NULL;
  }

  void insert(int value){
    if(root==NULL){
      root = new node;
      root->value = value;
      root->height = 0;
      return;
    }else if(search(value)!=NULL){
      cout<< "You cannot insert a repeated value" << endl;
    }else{
      node* fast;
      node* pointer;
      fast = root;
      pointer = root;
      while(fast!=NULL){
        if(fast->value>value){
          pointer = fast;
          fast = fast->left;
        }else{
          pointer = fast;
          fast = fast->right;
        }
      }
      if(pointer->value > value){
        
        pointer->left = new node;
        pointer->left->value = value;
        updateHeight(root);
        bool Balanced = true;
        node *first = searchParent(pointer->left, value);
        while(first !=root){
          Balanced = ifBalanced(first);
          if(Balanced==false){
            break;
          }first = searchParent(first, first->value);
        }
        while(ifBalanced(first)==false){
            node* pursuer = first;
            node* previous;
            if(pursuer==root){
              
              previous = root;
            }else{
              previous = searchParent(pursuer, pursuer->value);
            }
            node* detector;
            int drh;
            int dlh;
            if(pursuer->left==NULL){
                dlh = -1;
            }else{
                dlh= pursuer->left->height;
            }
            if(pursuer->right==NULL){
                drh = -1;
            }else{
                drh= pursuer->right->height;
            }
            if(drh>dlh){
              detector = pursuer->right;
            }else{
              detector = pursuer->left;
            }
              
              int temp = root->value;
              int pr, pl, dr, dl;
              if(pursuer->right==NULL){
                pr=-1;
              }else{
                pr = pursuer->right->height;
              }
              if(pursuer->left==NULL){
                pl=-1;
              }else{
                pl= pursuer->left->height;
              }
              if(detector->right==NULL){
                dr=-1;
              }else{
                dr = detector->right->height;
              }
              if(detector->left==NULL){
                dl=-1;
              }else{
                dl= detector->left->height;
              }
              
              if(pl>pr){
                if(dr>dl){
                  rightRotation(detector, pursuer);
                  leftRotation(pursuer, previous);
                }else{
                  leftRotation(pursuer, previous);
                }
              }else{
                if(dl>dr){
                  leftRotation(detector, pursuer);
                
                  rightRotation(pursuer, previous);
                }else{
                  rightRotation(pursuer, previous);
                }
              }
              
            if(first->value == temp){
              break;
            }else{
              first = searchParent(first, first->value);
            }
        }
        return;
      }else{
         pointer->right = new node;
            pointer->right->value = value;
            updateHeight(root);
            bool Balanced = true;
        node *first = searchParent(pointer->right, value);
        
        while(first !=root){
          Balanced = ifBalanced(first);
          if(Balanced==false){
            break;
          }first = searchParent(first, first->value);
        }
        while(ifBalanced(first)==false){
            node* pursuer = first;
            node* previous = searchParent(pursuer, pursuer->value);
            node* detector;
            int drh;
            int dlh;
            if(pursuer->left==NULL){
                dlh = -1;
            }else{
                dlh= pursuer->left->height;
            }
            if(pursuer->right==NULL){
                drh = -1;
            }else{
                drh= pursuer->right->height;
            }
            if(drh>dlh){
              detector = pursuer->right;
            }else{
              detector = pursuer->left;
            }
            
              int temp = root->value;
              int pr, pl, dr, dl;
              if(pursuer->right==NULL){
                pr=-1;
              }else{
                pr = pursuer->right->height;
              }
              if(pursuer->left==NULL){
                pl=-1;
              }else{
                pl= pursuer->left->height;
              }
              if(detector->right==NULL){
                dr=-1;
              }else{
                dr = detector->right->height;
              }
              if(detector->left==NULL){
                dl=-1;
              }else{
                dl= detector->left->height;
              }

              if(pl>pr){
                if(dr>dl){
                  rightRotation(detector, pursuer);
                  leftRotation(pursuer, previous);
                }else{
                  leftRotation(pursuer, previous);
                }
              }else{
                if(dl>dr){
                  leftRotation(detector, pursuer);
                  rightRotation(pursuer, previous);
                }else{
                  rightRotation(pursuer, previous);
                }
              }
            if(first->value == temp){
              break;
            }else{
              first = searchParent(first, first->value);
            }
        }
        return;

      }
  
       
    }
  }

  void deleteNode(int value){
    if(root ==NULL){
      cout<< "Insert something to delete"<< endl;
    }else if(search(value)==NULL){
      cout<< value << " does not exist in the tree." << endl;
    }else{
      node* deletion = search(value);
      node* parent = searchParent(deletion, value);
      
      if(deletion->right == NULL && deletion->left==NULL){
        // Deleted Node is a leaf.
        if(parent->right!= NULL&&parent->right->value==value){
          delete deletion;
          parent->right =NULL;
          updateHeight(root);
          bool Balanced = true;
        node *first = searchParent(parent, parent->value);
        while(first !=root){
          Balanced = ifBalanced(first);
          if(Balanced==false){
            break;
          }first = searchParent(first, first->value);
        }
        while(ifBalanced(first)==false){
            node* pursuer = first;
            node* previous = searchParent(pursuer, pursuer->value);
            node* detector;
            int drh;
            int dlh;
            if(pursuer->left==NULL){
                dlh = -1;
            }else{
                dlh= pursuer->left->height;
            }
            if(pursuer->right==NULL){
                drh = -1;
            }else{
                drh= pursuer->right->height;
            }
            if(drh>dlh){
              detector = pursuer->right;
            }else{
              detector = pursuer->left;
            }
              
              int temp = root->value;
              int pr, pl, dr, dl;
              if(pursuer->right==NULL){
                pr=-1;
              }else{
                pr = pursuer->right->height;
              }
              if(pursuer->left==NULL){
                pl=-1;
              }else{
                pl= pursuer->left->height;
              }
              if(detector->right==NULL){
                dr=-1;
              }else{
                dr = detector->right->height;
              }
              if(detector->left==NULL){
                dl=-1;
              }else{
                dl= detector->left->height;
              }

              if(pl>pr){
                if(dr>dl){
                  rightRotation(detector, pursuer);
                  leftRotation(pursuer, previous);
                }else{
                  leftRotation(pursuer, previous);
                }
              }else{
                if(dl>dr){
                  leftRotation(detector, pursuer);
                  rightRotation(pursuer, previous);
                }else{
                  rightRotation(pursuer, previous);
                }
              }
            if(first->value == temp){
              break;
            }else{
              first = searchParent(first, first->value);
            }
        }
        return;
        }else{
          delete deletion;
          parent->left= NULL;
          updateHeight(root);
          bool Balanced = true;
          node *first = searchParent(parent, parent->value);
        while(first !=root){
          Balanced = ifBalanced(first);
          if(Balanced==false){
            break;
          }first = searchParent(first, first->value);
        }
        while(ifBalanced(first)==false){
            node* pursuer = first;
            node* previous = searchParent(pursuer, pursuer->value);
            node* detector;
            int drh;
            int dlh;
            if(pursuer->left==NULL){
                dlh = -1;
            }else{
                dlh= pursuer->left->height;
            }
            if(pursuer->right==NULL){
                drh = -1;
            }else{
                drh= pursuer->right->height;
            }
            if(drh>dlh){
              detector = pursuer->right;
            }else{
              detector = pursuer->left;
            }
              
              int temp = root->value;
              int pr, pl, dr, dl;
              if(pursuer->right==NULL){
                pr=-1;
              }else{
                pr = pursuer->right->height;
              }
              if(pursuer->left==NULL){
                pl=-1;
              }else{
                pl= pursuer->left->height;
              }
              if(detector->right==NULL){
                dr=-1;
              }else{
                dr = detector->right->height;
              }
              if(detector->left==NULL){
                dl=-1;
              }else{
                dl= detector->left->height;
              }

              if(pl>pr){
                if(dr>dl){
                  rightRotation(detector, pursuer);
                  leftRotation(pursuer, previous);
                }else{
                  leftRotation(pursuer, previous);
                }
              }else{
                if(dl>dr){
                  leftRotation(detector, pursuer);
                  rightRotation(pursuer, previous);
                }else{
                  rightRotation(pursuer, previous);
                }
              }
            if(first->value == temp){
              break;
            }else{
              first = searchParent(first, first->value);
            }
        }
        return;
        }
      }else if(deletion->right!=NULL && deletion->left!=NULL){
        //Deleted Node is a parent of both children.
        node * probe = deletion->right;
        while(probe->left != NULL){
          probe = probe->left;
        }
        node*parent = searchParent(probe, probe->value);
        int temp = probe->value;
        probe->value = deletion->value;
        deletion->value = temp;
        if(parent->left==probe){
          delete probe;
          parent->left = NULL;
        }else{
          delete probe;
          parent->right = NULL;
        }
        updateHeight(root);
        bool Balanced = true;
        node *first = search(parent->value);
        while(first !=root){
          Balanced = ifBalanced(first);
          if(Balanced==false){
            break;
          }first = searchParent(first, first->value);
        }
        while(ifBalanced(first)==false){
            node* pursuer = first;
            node* previous = searchParent(pursuer, pursuer->value);
            node* detector;
            int drh;
            int dlh;
            if(pursuer->left==NULL){
                dlh = -1;
            }else{
                dlh= pursuer->left->height;
            }
            if(pursuer->right==NULL){
                drh = -1;
            }else{
                drh= pursuer->right->height;
            }
            if(drh>dlh){
              detector = pursuer->right;
            }else{
              detector = pursuer->left;
            }
              
              int temp = root->value;
              int pr, pl, dr, dl;
              if(pursuer->right==NULL){
                pr=-1;
              }else{
                pr = pursuer->right->height;
              }
              if(pursuer->left==NULL){
                pl=-1;
              }else{
                pl= pursuer->left->height;
              }
              if(detector->right==NULL){
                dr=-1;
              }else{
                dr = detector->right->height;
              }
              if(detector->left==NULL){
                dl=-1;
              }else{
                dl= detector->left->height;
              }

              if(pl>pr){
                if(dr>dl){
                  rightRotation(detector, pursuer);
                  leftRotation(pursuer, previous);
                }else{
                  leftRotation(pursuer, previous);
                }
              }else{
                if(dl>dr){
                  leftRotation(detector, pursuer);
                  rightRotation(pursuer, previous);
                }else{
                  rightRotation(pursuer, previous);
                }
              }
            if(first->value == temp){
              break;
            }else{
              first = searchParent(first, first->value);
            }
        }
        return;
      }else{
        //Deleted Node is a parent of one child.
         if(parent->right!= NULL&&parent->right->value==value){
           if(deletion->right==NULL){
             parent->right = deletion->left;
           }else{
             parent->right = deletion->right;
           }
          delete deletion;
          updateHeight(root);
          bool Balanced = true;
          node *first = searchParent(parent, parent->value);
        while(first !=root){
          Balanced = ifBalanced(first);
          if(Balanced==false){
            break;
          }first = searchParent(first, first->value);
        }
        while(ifBalanced(first)==false){
            node* pursuer = first;
            node* previous = searchParent(pursuer, pursuer->value);
            node* detector;
            int drh;
            int dlh;
            if(pursuer->left==NULL){
                dlh = -1;
            }else{
                dlh= pursuer->left->height;
            }
            if(pursuer->right==NULL){
                drh = -1;
            }else{
                drh= pursuer->right->height;
            }
            if(drh>dlh){
              detector = pursuer->right;
            }else{
              detector = pursuer->left;
            }
              
              int temp = root->value;
              int pr, pl, dr, dl;
              if(pursuer->right==NULL){
                pr=-1;
              }else{
                pr = pursuer->right->height;
              }
              if(pursuer->left==NULL){
                pl=-1;
              }else{
                pl= pursuer->left->height;
              }
              if(detector->right==NULL){
                dr=-1;
              }else{
                dr = detector->right->height;
              }
              if(detector->left==NULL){
                dl=-1;
              }else{
                dl= detector->left->height;
              }

              if(pl>pr){
                if(dr>dl){
                  rightRotation(detector, pursuer);
                  leftRotation(pursuer, previous);
                }else{
                  leftRotation(pursuer, previous);
                }
              }else{
                if(dl>dr){
                  leftRotation(detector, pursuer);
                  rightRotation(pursuer, previous);
                }else{
                  rightRotation(pursuer, previous);
                }
              }
            if(first->value == temp){
              break;
            }else{
              first = searchParent(first, first->value);
            }
        }
        return;
        }else{
          if(deletion->right==NULL){
             parent->left = deletion->left;
           }else{
             parent->left = deletion->right;
           }
          delete deletion;
          updateHeight(root);
          bool Balanced = true;
          node *first = searchParent(parent, parent->value);
        while(first !=root){
          Balanced = ifBalanced(first);
          if(Balanced==false){
            break;
          }first = searchParent(first, first->value);
        }
        while(ifBalanced(first)==false){
            node* pursuer = first;
            node* previous = searchParent(pursuer, pursuer->value);
            node* detector;
            int drh;
            int dlh;
            if(pursuer->left==NULL){
                dlh = -1;
            }else{
                dlh= pursuer->left->height;
            }
            if(pursuer->right==NULL){
                drh = -1;
            }else{
                drh= pursuer->right->height;
            }
            if(drh>dlh){
              detector = pursuer->right;
            }else{
              detector = pursuer->left;
            }
              
              int temp = root->value;
              int pr, pl, dr, dl;
              if(pursuer->right==NULL){
                pr=-1;
              }else{
                pr = pursuer->right->height;
              }
              if(pursuer->left==NULL){
                pl=-1;
              }else{
                pl= pursuer->left->height;
              }
              if(detector->right==NULL){
                dr=-1;
              }else{
                dr = detector->right->height;
              }
              if(detector->left==NULL){
                dl=-1;
              }else{
                dl= detector->left->height;
              }

              if(pl>pr){
                if(dr>dl){
                  rightRotation(detector, pursuer);
                  leftRotation(pursuer, previous);
                }else{
                  leftRotation(pursuer, previous);
                }
              }else{
                if(dl>dr){
                  leftRotation(detector, pursuer);
                  rightRotation(pursuer, previous);
                }else{
                  rightRotation(pursuer, previous);
                }
              }
            if(first->value == temp){
              break;
            }else{
              first = searchParent(first, first->value);
            }
        }
        return;
        }
      }
      
    }
  }
  



  void inOrder(node* pointer){
    if(root==NULL){
      cout << "nothing to print "<< endl;
    }else{
      if(pointer==NULL){
        return;
      }else{
        
        inOrder(pointer->left);
        cout<< pointer->value << " ";
        inOrder(pointer->right);
      }
    }
  }
  




  int updateHeight(node* root){
    if(root==NULL){
      return -1;
    }else{
      root->height = max(updateHeight(root->left), updateHeight(root->right))+1;
      return root->height;
    }
  }
  
  bool ifBalanced(node *pointer){
    if(root==NULL){
      cout<<"Insert Something First"<<endl;
    }else{
     if(pointer->left!=NULL&&pointer->right!=NULL){
      int difference = abs(pointer->left->height-pointer->right->height);
      if(difference > 1){
        return false;
      }
    }else if(pointer->left==NULL){
        int difference = abs(-1-pointer->right->height);
        if(difference > 1){
          return false;
        }
    }else if(pointer->right==NULL){
        int difference = abs(-1-pointer->left->height);
        if(difference > 1){
          return false;
        } 
    }else{
        return true;
      }
    }
    return true;
  }


     

  




  void rightRotation(node *begin, node* previous){
      node* end = begin->right;
      begin->right = end->left;
      end->left = begin;
      
      if(begin==previous){
        root=end;
      }else{
        if(previous->left->value == begin->value){
          previous->left = end;
        }else{
          previous->right = end;
        }
      }
    
    updateHeight(root);
  }
  void leftRotation(node *begin, node* previous){
    
      node *end = begin->left;
      begin->left= end->right;
      end->right = begin;
      
      if(begin==previous){
        root=end;
      }else{
        if(previous->right->value == begin->value){
          previous->right = end;
        }else{
          previous->left = end;
        }
      }
      
      updateHeight(root);
      
  }
  node* searchParent(node* pointer, int value){
   node* slow = root;
   node* fast = root;
   while(fast->value != value){
     if(fast->value>value){
       slow = fast;
       fast = fast->left;
     }else{
       slow = fast;
       fast=fast->right;
     }
   }
    return slow;
  }
};

  
int main(){
  Tree* bigTree = new Tree();
  while(1){
    cout<< "Enter 1 to insert something in the Tree." <<endl;
    cout<< "Enter 2 to delete something in the Tree." <<endl;
    cout<< "Enter 3 to search something in the Tree." <<endl;
    cout<< "Enter 4 to see what is inside the Tree." <<endl;
    cout<< "Enter 5 to terminate." <<endl;
    int userInput;
    cin>> userInput;
    switch(userInput){
      case 1: cout<< "What do you want to insert in the Tree? (numbers only)"<<endl;
      int num;
      cin >>num;
      bigTree->insert(num);
      cout<<endl;
      break;
      case 2: cout<< "What do you want to delete in the Tree? (numbers only)"<<endl;
      int num1;
      cin >>num1;
      bigTree->deleteNode(num1);
      cout<<endl;
      break;
      case 3: cout<< "What do you want to search in the Tree? (numbers only)"<<endl;
      int num2;
      cin>>num2;
      bigTree->search(num2);
      cout<<endl;
      break;
      case 4: bigTree->inOrder(bigTree->root);
      cout<<endl;
      break;
      case 5: return 0;
    }
    
  }

  
  
  return 0;
}
