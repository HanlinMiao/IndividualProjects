#include <iostream>
#include<stdlib.h> 
#include<stdio.h> 
#include <vector>
#include <chrono> 
using namespace std::chrono; 
using namespace std;
vector<int> mergeSort(vector<vector<int> > tree, int index){
  cout<< index << endl;
  vector<int> C;
  int n  = tree.size();
  int i  = 0;
  int j  = 0;
  int M= tree[index].size();
  int N= tree[index+1].size();
  if(index == n-2){
    while (i<M&&j<N){
      if(tree[index][i]<=tree[index+1][j]){
        C.push_back(tree[index][i]);
        i++;
      }else{
        C.push_back(tree[index+1][j]);
        j++;
      }
    }
    while (i < M){
      C.push_back(tree[index][i]);
      i++;
    }
    while(j < N){
      C.push_back(tree[index+1][j]);
      j++;
    }

    return C;
    
  }
    while (i<M&&j<N){
      if(tree[index][i]<=tree[index+1][j]){
        C.push_back(tree[index][i]);
        i++;
      }else{
        C.push_back(tree[index+1][j]);
        j++;
      }
    }
    while (i < M){
      C.push_back(tree[index][i]);
      i++;
    }
    while(j < N){
      C.push_back(tree[index+1][j]);
      j++;
    }
    tree.push_back(C);
    return mergeSort(tree, index+2);
    
}




vector< vector<int> > partitionTree(vector<int> A){
  vector< vector <int> >MergeTree;
  for(int i = 0; i< A.size(); i++){
    vector<int> temp;
    temp.push_back(A[i]);
    MergeTree.push_back(temp);
  }
 
  return MergeTree;
}



int main() {
 
  vector<int> A;
 for(int i = 0; i< 200; i++){
   A.push_back(100-i);
 }
  vector< vector<int> > tree = partitionTree(A);
  auto start = high_resolution_clock::now(); 
  
   A = mergeSort(tree, 0);
  auto stop = high_resolution_clock::now(); 
  auto duration = duration_cast<microseconds>(stop - start); 
  cout << "Time taken by function: "
      << duration.count() << " microseconds" << endl; 
}
