#include <iostream>
#include <cstring>
#include <algorithm>
#include <vector>
#include <cstdlib>
#include <chrono>
#include <cmath>
#include <limits>
using namespace std::chrono;
using namespace std;

int solution(vector<int> &A, vector<int> &B, vector<bool> &C) {
    // write your code in C++14 (g++ 6.2.0)
    int count  = 0;
    int index = -2;
   for(int i=0; i<A.size(); i++){
        if(C[A[i]]!=C[B[i]]){
          index = i;
          count ++;
        }

   }
    if(count>1){
        return -1;
    }else{
        return index;
    }
}


int main() {
  vector<int> A;
  A.push_back(0);
  A.push_back(1);
  A.push_back(2);
  A.push_back(3);
  A.push_back(5);
  vector<int> B;
  B.push_back(4);
  B.push_back(3);
  B.push_back(0);
  B.push_back(0);
  B.push_back(1);
  vector<bool>C;
  C.push_back(true);
  C.push_back(false);
  C.push_back(true);
  C.push_back(false);
  C.push_back(true);
  C.push_back(false);
  auto start = high_resolution_clock::now();

    cout<< solution(A, B, C)<< endl;

  auto end = high_resolution_clock::now();

  auto duration = duration_cast<microseconds>(end - start);

    
  cout<< duration.count()<< endl;;
}
